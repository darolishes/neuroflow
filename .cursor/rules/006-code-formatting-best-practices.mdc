---
description: Follow Prettier preferences for code formatting while minimizing redundancy
globs: **/*.{ts,tsx,js,jsx}
alwaysApply: false
---

# Code Formatting Best Practices

## Context
- When writing or editing code
- When configuring formatting tools
- When responding to code adjustment requests

## Requirements
- Follow Prettier preferences for code formatting
- When adjustments are requested, minimize repetition and show only relevant parts
- Split responses into multiple messages if necessary for clarity
- Adhere strictly to MCP Server usage rules without exceptions

## Examples
<example>
// Good code formatting with Prettier preferences
const formatUser = (user) => ({
  id: user.id,
  name: user.firstName + ' ' + user.lastName,
  email: user.email,
  isActive: Boolean(user.active),
  lastLogin: user.lastLogin
    ? new Date(user.lastLogin).toISOString()
    : null
});
</example>

<example type="invalid">
// Poor code formatting
const formatUser = (user) => {
return {id:user.id,name:user.firstName+' '+user.lastName,
email: user.email,
isActive: Boolean(user.active),lastLogin: user.lastLogin ? new Date(user.lastLogin).toISOString() : null};
};
</example>

## Critical Rules
  - Always follow Prettier formatting preferences
  - Show only relevant parts when making code adjustments
  - Split complex responses into multiple messages when needed
  - Adhere to MCP Server usage rules without exception